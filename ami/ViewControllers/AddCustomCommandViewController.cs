// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using AVFoundation;
using Foundation;
using UIKit;
using Realms;
using ami.Model;
using System.Linq;
using AudioToolbox;

namespace ami
{
    public partial class AddCustomCommandViewController : UIViewController
    {

        AVAudioRecorder recorder;
        NSError error;
        NSUrl url;
        NSDictionary settings;
        AVAudioPlayer _player;
        string fileName;

        public AddCustomCommandViewController(IntPtr handle) : base(handle)
        {

        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            HoldToTalkButton.TouchDown += HoldToTalkButton_TouchDown;
            HoldToTalkButton.TouchUpInside += HoldToTalkButton_TouchUpInside;
            PlayButton.TouchUpInside += PlayButton_TouchUpInside;
            RetryButton.TouchUpInside += RetryButton_TouchUpInside;
            //FinishButton.TouchUpInside += FinishButton_TouchUpInside;
            InitialiseAudio();
        }


        bool InitialiseAudio()
        {
            var audioSession = AVAudioSession.SharedInstance();
            var err = audioSession.SetCategory(AVAudioSessionCategory.PlayAndRecord);
            if (err != null)
            {
                Console.WriteLine("audioSession: {0}", err);
                return false;
            }
            err = audioSession.SetActive(true);
            if (err != null)
            {
                Console.WriteLine("audioSession: {0}", err);
                return false;
            }
            audioSession.RequestRecordPermission(granted => Console.WriteLine("Audio Permission:" + granted));

            //Declare string for application temp path and tack on the file extension
            var docsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            var libPath = Directory.GetParent(docsPath).ToString();
            Directory.CreateDirectory(Path.Combine(libPath, "Library", "Sounds"));
            fileName = Guid.NewGuid().ToString().Substring(0, 13) + ".wav";
            var path = Path.Combine(libPath, "Library", "Sounds", fileName);
            string audioFilePath = path;

            Console.WriteLine("Audio File Path: " + audioFilePath);

            url = NSUrl.FromFilename(audioFilePath);
            //set up the NSObject Array of values that will be combined with the keys to make the NSDictionary
            NSObject[] values = new NSObject[]
            {
                NSNumber.FromFloat (11025.0f), //Sample Rate
                NSNumber.FromInt32 ((int)AudioToolbox.AudioFormatType.LinearPCM), //AVFormat
                NSNumber.FromInt32 (2), //Channels
                NSNumber.FromInt32 (16), //PCMBitDepth
                NSNumber.FromBoolean (false), //IsBigEndianKey
                NSNumber.FromBoolean (false) //IsFloatKey
            };

            //Set up the NSObject Array of keys that will be combined with the values to make the NSDictionary
            NSObject[] keys = new NSObject[]
            {
                AVAudioSettings.AVSampleRateKey,
                AVAudioSettings.AVFormatIDKey,
                AVAudioSettings.AVNumberOfChannelsKey,
                AVAudioSettings.AVLinearPCMBitDepthKey,
                AVAudioSettings.AVLinearPCMIsBigEndianKey,
                AVAudioSettings.AVLinearPCMIsFloatKey
            };

            //Set Settings with the Values and Keys to create the NSDictionary
            settings = NSDictionary.FromObjectsAndKeys(values, keys);

            //Set recorder parameters
            recorder = AVAudioRecorder.Create(url, new AudioSettings(settings), out error);
            recorder.PrepareToRecord();

            return true;
        }


        void HoldToTalkButton_TouchDown(object sender, EventArgs e)
        {
            HoldToTalkButton.SetTitle(NSBundle.MainBundle.GetLocalizedString("Recording Now", null), UIControlState.Normal);
            recorder.Record();
        }

        void HoldToTalkButton_TouchUpInside(object sender, EventArgs e)
        {
            recorder.Stop(); 
            HoldToTalkButton.SetTitle(NSBundle.MainBundle.GetLocalizedString("Hold To Record", null), UIControlState.Normal);
            HoldToTalkButton.Hidden = true;
            PlayButton.Hidden = false;
            RetryButton.Hidden = false;
        }

        void PlayButton_TouchUpInside(object sender, EventArgs e)
        {
            MessageNameField.ResignFirstResponder();
            PlayAudioFile(recorder.Url);
        }

        void RetryButton_TouchUpInside(object sender, EventArgs e)
        {
            MessageNameField.ResignFirstResponder();
            RetryButton.Hidden = true;
            PlayButton.Hidden = true;
            HoldToTalkButton.Hidden = false;
        }

        void PlayAudioFile(NSUrl url)
        {
            _player?.Stop();
            _player = AVAudioPlayer.FromUrl(url);
            _player.Play();
            _player.PrepareToPlay();
            _player.Play();
        }

       


        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            HoldToTalkButton.TouchDown -= HoldToTalkButton_TouchDown;
            HoldToTalkButton.TouchUpInside -= HoldToTalkButton_TouchUpInside;
            PlayButton.TouchUpInside -= PlayButton_TouchUpInside;
           // FinishButton.TouchUpInside -= FinishButton_TouchUpInside;
            RetryButton.TouchUpInside -= RetryButton_TouchUpInside;
        }

        public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
        {
            if(segueIdentifier == "CancelUnwindToMain" )
            {
                return true;
            }
            if (string.IsNullOrWhiteSpace(MessageNameField.Text) || HoldToTalkButton.Hidden == false)
            {
                return false;
            }
            var realm = AppDelegate.GetRealm();
            var setting = realm.All<SettingsModel>().FirstOrDefault();
            var command = new VoiceCommandModel()
            {
                Name = MessageNameField.Text,
                Url = recorder.Url.ToString(),
                FileName = fileName,
            };
            realm.Write(() =>
            {
                setting.VoiceCommands.Add(command);
            });
            return true;
        }
    }
}
