// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using ami.Helper;
using Foundation;
using UIKit;
using AVFoundation;

namespace ami.ViewControllers
{
    public partial class LanguageLearningViewController : UIViewController, IErrorHandleViewController
    {
        public LanguageLearningViewController(IntPtr handle) : base(handle)
        {
        }

        Tuple<string,string>[] fromCodes = {Tuple.Create("zh","zh-CN"), Tuple.Create("en", "en-US"), Tuple.Create("spa", "es-ES") };
        Tuple<string, string>[] toCodes = { Tuple.Create("en", "en-US"), Tuple.Create("spa", "es-ES"),Tuple.Create("zh", "zh-CN") };

        public override void ViewDidLoad()
        {
            PlayTranslatedButton.TouchUpInside += PlayTranslatedButton_TouchUpInside;
            TranslationTextField.ReturnKeyType = UIReturnKeyType.Done;
            TranslationTextField.ShouldReturn += TranslationTextField_ShouldReturn;
            base.ViewDidLoad();
        }

        bool TranslationTextField_ShouldReturn(UITextField textField)
        {
            textField.ResignFirstResponder();
            return true;
        }


        void PlayTranslatedButton_TouchUpInside(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(TranslationTextField.Text))
            {
                PresentProblemAlert("Please Enter Something Before Translation");
                return;
            }
            TranslationTextField.ResignFirstResponder();
            var helper = new TranslationHelper();
            var from = fromCodes[FromLanguageSegment.SelectedSegment];
            var to = toCodes[ToLanguageSegment.SelectedSegment];
            var translateTask = helper.Translate(from: from.Item1, to: to.Item1, content: TranslationTextField.Text);
            translateTask.ContinueWith((arg) =>
            {
                InvokeOnMainThread(() =>
                {
                    TranslationTextField.Text = "";
                    var speechSynthesizer = new AVSpeechSynthesizer();
                    var speechUtterance = new AVSpeechUtterance(arg.Result);
                    var voice = AVSpeechSynthesisVoice.FromLanguage(to.Item2);
                    speechUtterance.Voice = voice;
                    speechSynthesizer.SpeakUtterance(speechUtterance);
                });
            } , TaskContinuationOptions.OnlyOnRanToCompletion);
            RefitErrorProcessing.Process(translateTask, this);
        }

        public void PresentProblemAlert(string msg)
        {
            var okAlertController = UIAlertController.Create("Error", msg, UIAlertControllerStyle.Alert);
            //Add Action
            okAlertController.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));

            // Present Alert
            PresentViewController(okAlertController, true, null);
        }
    }
}
